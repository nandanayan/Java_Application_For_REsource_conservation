/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UserAccount;

import Business.*;
import Business.City.City;
import Business.CorporationAdmin.Bill;
import Business.CorporationAdmin.Meter;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.BillRequest;
import Business.WorkQueue.WorkRequest;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.CardLayout;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lahar
 */
public class BillPaymentsPanel extends javax.swing.JPanel {

    private JPanel displayPanel;
    private EcoSystem system;
    private UserAccount userAccount;
    private String billType;
    private Date dueDate;

    /**
     * Creates new form BillPaymentsPanel
     */
    BillPaymentsPanel(JPanel displayPanel, EcoSystem system, UserAccount userAccount) {
        initComponents();
        this.displayPanel = displayPanel;
        this.system = system;//To change body of generated methods, choose Tools | Templates.
        this.userAccount = userAccount;

        populateBillPaymentTable();
    }

    public void populateBillPaymentTable() {
        DefaultTableModel model = (DefaultTableModel) payTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[4];
            row[0] = request;
            // row[1] = request.getSender().getFirstName();
            row[1] = request.getBillType();
            // row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[2] = request.getRequestDate();
            row[3] = request.getBillingStatus();

            this.billType = request.getBillType();
            this.dueDate = request.getRequestDate();
//            row[0] = 1;
//            row[1] = "ali";
//           // row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
//            row[2] = "ali";
//            
            if (!request.isFlag() && !request.getMessage().equalsIgnoreCase("hi")) {
                model.addRow(row);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        payTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        viewBillBtn = new javax.swing.JButton();
        payBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 51));

        payTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SERIAL NUMBER", "Enterprise", "DATE", "STATUS"
            }
        ));
        jScrollPane1.setViewportView(payTable);

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 3, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("BILL PAYMENTS");

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backBtn.setText(">>BACK");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewBillBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewBillBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        viewBillBtn.setText("VIEW BILL");
        viewBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBillBtnActionPerformed(evt);
            }
        });

        payBtn.setBackground(new java.awt.Color(255, 255, 255));
        payBtn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        payBtn.setText("PAY");
        payBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(592, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(payBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(viewBillBtn)
                        .addGap(204, 204, 204))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 762, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(506, 506, 506))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(719, 719, 719))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtn))
                .addGap(100, 100, 100)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewBillBtn)
                    .addComponent(payBtn))
                .addContainerGap(296, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        displayPanel.remove(this);
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);        // TODO add your handling code here:
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBillBtnActionPerformed

        int selectedrow = payTable.getSelectedRow();

        if (selectedrow >= 0) {
            JFileChooser dialog = new JFileChooser();
            int dialogResult = dialog.showSaveDialog(null);
            if (dialogResult == JFileChooser.APPROVE_OPTION) {
                String filePath = dialog.getSelectedFile().getPath();
                try {
                    Document document = new Document();
                    PdfWriter.getInstance(document, new FileOutputStream(filePath));

                    Font font = new Font(Font.FontFamily.HELVETICA, 32);
                    document.setMargins(36, 72, 108, 180);
                    document.open();
                    document.add(new Paragraph("                 EGW Systems", font));

                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));

                    document.add(new Paragraph("Corporation: " + this.billType));

                    document.add(new Paragraph("\n"));

                    document.add(new Paragraph("Name: " + userAccount.getFirstName() + " " + userAccount.getLastName()));

                    document.add(new Paragraph("\n"));

                    document.add(new Paragraph("Address: " + userAccount.getStreet1() + ", " + userAccount.getCity() + " " + userAccount.getZip()));

                    document.add(new Paragraph("\n"));

                    document.add(new Paragraph("Bill No.: " + userAccount.getBillNo()));

                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));

                    PdfPTable table = new PdfPTable(4);

                    if (this.billType.equalsIgnoreCase("Electricity Enterprise")) {
                        table.addCell("Units Consumed (KWh)");
                        table.addCell("Amount ($)");
                        table.addCell("Usage (KWh)");
                        table.addCell("Overuse (KWh)");
                    }

                    if (this.billType.equalsIgnoreCase("Gas Enterprise")) {
                        table.addCell("Units Consumed (Btu)");
                        table.addCell("Amount ($)");
                        table.addCell("Usage (Btu)");
                        table.addCell("Overuse (Btu)");
                    }

                    if (this.billType.equalsIgnoreCase("Water Enterprise")) {
                        table.addCell("Units Consumed (gpm)");
                        table.addCell("Amount ($)");
                        table.addCell("Usage (gpm)");
                        table.addCell("Overuse (gpm)");
                    }

                    double usage = 0, overuse = 0;
                    double ebill1 = 0, ebill2 = 0, ebill3 = 0, ebill4 = 0, eBill, gBill, wBill, finalEBill = 0;
                    double gbill1 = 0, gbill2 = 0, gbill3 = 0, gbill4 = 0, finalGBill = 0;
                    double wbill1 = 0, wbill2 = 0, wbill3 = 0, wbill4 = 0, finalWBill = 0;

                    for (int i = 0; i <= 30; i++) {
                        Meter meter1 = userAccount.getMeterReadingList().get(i);

                        if (this.billType.equalsIgnoreCase("Electricity Enterprise")) {
                            usage += meter1.getEmReading();
                            overuse += meter1.geteOveruse();
                        }

                        if (this.billType.equalsIgnoreCase("Gas Enterprise")) {
                            usage += meter1.getGmReading();
                            overuse += meter1.getgOveruse();
                        }

                        if (this.billType.equalsIgnoreCase("Water Enterprise")) {
                            usage += meter1.getWmReading();
                            overuse += meter1.getwOveruse();
                        }

                        Bill bill = new Bill();

                        for (Threshold t : system.getThresholdList()) {
                            if (meter1.getEmReading() <= 30 && t.geteRange().equalsIgnoreCase("0-30")) {
                                ebill1 = t.geteFactor() * meter1.getEmReading();
                            }

                            if (meter1.getEmReading() >= 31 && meter1.getEmReading() <= 33 && t.geteRange().equalsIgnoreCase("31-33")) {
                                ebill2 = t.geteFactor() * meter1.getEmReading();
                            }

                            if (meter1.getEmReading() >= 34 && meter1.getEmReading() <= 36 && t.geteRange().equalsIgnoreCase("34-36")) {
                                ebill3 = t.geteFactor() * meter1.getEmReading();
                            }

                            if (meter1.getEmReading() >= 37 && meter1.getEmReading() <= 40 && t.geteRange().equalsIgnoreCase("37-40")) {
                                ebill4 = t.geteFactor() * meter1.getEmReading();
                            }

                        }

                        for (Threshold t : system.getThresholdList()) {

                            if (meter1.getGmReading() <= 5 && t.getgRange().equalsIgnoreCase("0-5")) {
                                gbill1 = t.getgFactor() * meter1.getGmReading();
                            }

                            if (meter1.getGmReading() >= 6 && meter1.getGmReading() <= 11 && t.getgRange().equalsIgnoreCase("6-11")) {
                                gbill2 = t.getgFactor() * meter1.getGmReading();
                            }

                            if (meter1.getGmReading() >= 12 && meter1.getGmReading() <= 17 && t.getgRange().equalsIgnoreCase("12-17")) {
                                gbill3 = t.getgFactor() * meter1.getGmReading();
                            }

                            if (meter1.getGmReading() >= 18 && meter1.getGmReading() <= 23 && t.getgRange().equalsIgnoreCase("18-23")) {
                                gbill4 = t.getgFactor() * meter1.getGmReading();
                            }

                        }

                        for (Threshold t : system.getThresholdList()) {

                            if (meter1.getWmReading() <= 3 && t.getwRange().equalsIgnoreCase("0-3")) {
                                wbill1 = t.getwFactor() * meter1.getWmReading();
                            }

                            if (meter1.getWmReading() >= 4 && meter1.getWmReading() <= 7 && t.getwRange().equalsIgnoreCase("4-7")) {
                                wbill2 = t.getwFactor() * meter1.getWmReading();
                            }

                            if (meter1.getWmReading() >= 8 && meter1.getWmReading() <= 11 && t.getwRange().equalsIgnoreCase("8-11")) {
                                wbill3 = t.getwFactor() * meter1.getWmReading();
                            }

                            if (meter1.getWmReading() >= 12 && meter1.getWmReading() <= 15 && t.getwRange().equalsIgnoreCase("12-15")) {
                                wbill4 = t.getwFactor() * meter1.getWmReading();
                            }

                        }

                        eBill = ebill1 + ebill2 + ebill3 + ebill4;
                        gBill = gbill1 + gbill2 + gbill3 + gbill4;
                        wBill = wbill1 + wbill2 + wbill3 + wbill4;

                        bill.seteBill(eBill);
                        bill.setgBill(gBill);
                        bill.setwBill(wBill);

                        userAccount.getMonthlyBill().add(bill);

                    }

                    for (Bill bill : userAccount.getMonthlyBill()) {
                        finalEBill += bill.geteBill();
                        finalGBill += bill.getgBill();
                        finalWBill += bill.getwBill();
                    }

                    double finalBill = 0;

                    if (this.billType.equalsIgnoreCase("Electricity Enterprise")) {
                        finalBill = finalEBill;
                    }

                    if (this.billType.equalsIgnoreCase("Gas Enterprise")) {
                        finalBill = finalGBill;
                    }

                    if (this.billType.equalsIgnoreCase("Water Enterprise")) {
                        finalBill = finalWBill;
                    }

                    table.addCell(String.valueOf(usage + overuse));//State
                    table.addCell(String.valueOf(finalBill));//City1
                    table.addCell(String.valueOf(usage));
                    table.addCell(String.valueOf(overuse));
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");

                    document.add(table);

                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));
                    document.add(new Paragraph("\n"));

                    document.add(new Paragraph("Amount Payable: " + String.valueOf(finalBill) + " $"));

                    document.add(new Paragraph("\n"));

//                    Calendar c1 = Calendar.getInstance();
//                    //    c1.set(Calendar.DATE, c1.get(Calendar.DATE) +10);
//                    c1.setTime(this.dueDate);
//                    c1.set(Integer.parseInt(c1.getTime().toString()), c1.get(Calendar.DATE) + 10);
                    document.add(new Paragraph("Due Date :" + this.dueDate));

                    document.close();
                } catch (DocumentException de) {
                    de.printStackTrace();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select any row");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_viewBillBtnActionPerformed

    private void payBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = payTable.getSelectedRow();

        if (selectedrow >= 0) {
            WorkRequest request = (WorkRequest) payTable.getValueAt(selectedrow, 0);

            //     BillRequest request=new BillRequest();
            //  request.setMessage("Your bill is due");
            request.setBillingStatus("Paid");
            userAccount.setBillingStatus("Paid");
            //  request.setFlag(false);

            //        ua.getWorkQueue().getWorkRequestList().add(request);
            //  UserAccount ua=system.getUserAccountDirectory().searchUser(selectedrow);
//            ViewUsersPanel panel = new ViewUsersPanel(displayPanel, ua);
//            displayPanel.add("ViewUsersPanel", panel);
//            CardLayout layout = (CardLayout) displayPanel.getLayout();
//            layout.next(displayPanel);
            JOptionPane.showMessageDialog(null, "Bill Piad successfully");
        } else {
            JOptionPane.showMessageDialog(null, "Please select any row");
        }
    }//GEN-LAST:event_payBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton payBtn;
    private javax.swing.JTable payTable;
    private javax.swing.JButton viewBillBtn;
    // End of variables declaration//GEN-END:variables
}
