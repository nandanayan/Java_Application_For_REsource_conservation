/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FedralAdmin;

import Business.City.City;
import Business.EcoSystem;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.CorporationAdmin.Meter;
import com.itextpdf.awt.DefaultFontMapper;
import java.awt.Insets;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
//import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Position;
import javax.swing.text.Segment;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.CardLayout;
import java.awt.Component;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.tree.DefaultMutableTreeNode;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author aliasgar
 */
public class ReportsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReportsJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;

    private JTextField filename = new JTextField();
    JTextField dir = new JTextField();

    public ReportsJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnElectricityReport = new javax.swing.JButton();
        btnGasReport = new javax.swing.JButton();
        btnWaterReport = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 3, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Report Generation");

        btnElectricityReport.setBackground(new java.awt.Color(255, 255, 255));
        btnElectricityReport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnElectricityReport.setText("Electricity");
        btnElectricityReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnElectricityReportActionPerformed(evt);
            }
        });

        btnGasReport.setBackground(new java.awt.Color(255, 255, 255));
        btnGasReport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnGasReport.setText("Gas");
        btnGasReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGasReportActionPerformed(evt);
            }
        });

        btnWaterReport.setBackground(new java.awt.Color(255, 255, 255));
        btnWaterReport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnWaterReport.setText("Water");
        btnWaterReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWaterReportActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        backJButton.setText(">>BACK");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnWaterReport, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGasReport, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnElectricityReport, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(847, 847, 847))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(backJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 614, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(756, 756, 756))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backJButton))
                .addGap(183, 183, 183)
                .addComponent(btnElectricityReport)
                .addGap(91, 91, 91)
                .addComponent(btnGasReport)
                .addGap(90, 90, 90)
                .addComponent(btnWaterReport)
                .addContainerGap(323, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1860, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 886, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnElectricityReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnElectricityReportActionPerformed
        // TODO add your handling code here:

        JFileChooser dialog = new JFileChooser();
        int dialogResult = dialog.showSaveDialog(null);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            String filePath = dialog.getSelectedFile().getPath();
            try {
                Document document = new Document();
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
                Font font = new Font(Font.FontFamily.HELVETICA, 32);
                document.setMargins(36, 72, 108, 180);
                //document.setMarginMirroring(true);

                document.open();

                document.add(new Paragraph("                 EGW Systems", font));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Corporation: " + "Electricity Corporation"));

                document.add(new Paragraph("\n"));

                Random r = new Random();

                document.add(new Paragraph("Report Serial No.: " + r.nextInt(1000) + 2347));

                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Period: " + "September 2016-December 2016"));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                PdfPTable table = new PdfPTable(4);

                table.addCell("State");
                table.addCell("City");
                table.addCell("Usage (KWh)");
                table.addCell("Overuse (KWh)");

                for (State state : system.getStateList()) {
                    double stateTotalUse = 0, stateTotalOveruse = 0;
                    for (City city : state.getCityDirectory().getCityList()) {
                        double cityUsage = 0, overuse = 0;

                        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {

                            if (userAccount.getCity() != null) {
                                if (userAccount.getCity().equalsIgnoreCase(city.getName())) {
                                    for (Meter meter : userAccount.getMeterReadingList()) {
                                        cityUsage += meter.getEmReading();
                                        overuse += meter.geteOveruse();
                                    }
                                }
                            }
                        }

                        stateTotalUse += cityUsage;
                        stateTotalOveruse += overuse;

                        table.addCell(state.getName());//State
                        table.addCell(city.getName());//City1
                        table.addCell(String.valueOf(cityUsage));
                        table.addCell(String.valueOf(overuse));

                    }
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("Total Usage");//State
                    table.addCell(String.valueOf(stateTotalUse) + " KWh");//City1
                    table.addCell("Total OverUse");
                    table.addCell(String.valueOf(stateTotalOveruse + " KWh"));

                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                }

//                    table.addCell("Total");
//                    table.addCell("\t");
//                    table.addCell("Consumption");
                document.add(table);

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                JFreeChart chart1 = generateBarChart();

                PdfContentByte contentByte = writer.getDirectContent();
                PdfTemplate template = contentByte.createTemplate(500, 400);
                Graphics2D graphics2d = template.createGraphics(500, 400, new DefaultFontMapper());
                Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, 500, 400);

                chart1.draw(graphics2d, rectangle2d);

                graphics2d.dispose();
                contentByte.addTemplate(template, 0, 0);

                document.close();
            } catch (DocumentException de) {
                de.printStackTrace();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

        }


    }//GEN-LAST:event_btnElectricityReportActionPerformed

    private void btnGasReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGasReportActionPerformed
        // TODO add your handling code here:
        JFileChooser dialog = new JFileChooser();
        int dialogResult = dialog.showSaveDialog(null);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            String filePath = dialog.getSelectedFile().getPath();
            try {
                Document document = new Document();
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
                Font font = new Font(Font.FontFamily.HELVETICA, 32);
                document.setMargins(36, 72, 108, 180);
                //document.setMarginMirroring(true);

                document.open();

                document.add(new Paragraph("                 EGW Systems", font));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Corporation: " + "Gas Corporation"));

                document.add(new Paragraph("\n"));

                Random r = new Random();

                document.add(new Paragraph("Report Serial No.: " + r.nextInt(1000) + 3347));

                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Period: " + "September 2016-December 2016"));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                PdfPTable table = new PdfPTable(4);

                table.addCell("State");
                table.addCell("City");
                table.addCell("Usage (Btu)");
                table.addCell("Overuse (Btu)");

                for (State state : system.getStateList()) {
                    double stateTotalUse = 0, stateTotalOveruse = 0;
                    for (City city : state.getCityDirectory().getCityList()) {
                        double cityUsage = 0, overuse = 0;

                        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {

                            if (userAccount.getCity() != null) {
                                if (userAccount.getCity().equalsIgnoreCase(city.getName())) {
                                    for (Meter meter : userAccount.getMeterReadingList()) {
                                        cityUsage += meter.getGmReading();
                                        overuse += meter.getgOveruse();
                                    }
                                }
                            }
                        }

                        stateTotalUse += cityUsage;
                        stateTotalOveruse += overuse;

                        table.addCell(state.getName());//State
                        table.addCell(city.getName());//City1
                        table.addCell(String.valueOf(cityUsage));
                        table.addCell(String.valueOf(overuse));

                    }
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("Total Usage");//State
                    table.addCell(String.valueOf(stateTotalUse) + " Btu");//City1
                    table.addCell("Total OverUse");
                    table.addCell(String.valueOf(stateTotalOveruse + " Btu"));

                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                }

//                    table.addCell("Total");
//                    table.addCell("\t");
//                    table.addCell("Consumption");
                document.add(table);

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                JFreeChart chart1 = generateBarChart();

                PdfContentByte contentByte = writer.getDirectContent();
                PdfTemplate template = contentByte.createTemplate(500, 400);
                Graphics2D graphics2d = template.createGraphics(500, 400, new DefaultFontMapper());
                Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, 500, 400);

                chart1.draw(graphics2d, rectangle2d);

                graphics2d.dispose();
                contentByte.addTemplate(template, 0, 0);

                document.close();
            } catch (DocumentException de) {
                de.printStackTrace();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnGasReportActionPerformed

    private void btnWaterReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWaterReportActionPerformed
        // TODO add your handling code here:
        JFileChooser dialog = new JFileChooser();
        int dialogResult = dialog.showSaveDialog(null);
        if (dialogResult == JFileChooser.APPROVE_OPTION) {
            String filePath = dialog.getSelectedFile().getPath();
            try {
                Document document = new Document();
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
                Font font = new Font(Font.FontFamily.HELVETICA, 32);
                document.setMargins(36, 72, 108, 180);
                //document.setMarginMirroring(true);

                document.open();

                document.add(new Paragraph("                 EGW Systems", font));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Corporation: " + "Water Corporation"));

                document.add(new Paragraph("\n"));

                Random r = new Random();

                document.add(new Paragraph("Report Serial No.: " + r.nextInt(1000) + 3428));

                document.add(new Paragraph("\n"));

                document.add(new Paragraph("Period: " + "September 2016-December 2016"));

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                PdfPTable table = new PdfPTable(4);

                table.addCell("State");
                table.addCell("City");
                table.addCell("Usage (gpm)");
                table.addCell("Overuse (gpm)");

                for (State state : system.getStateList()) {
                    double stateTotalUse = 0, stateTotalOveruse = 0;
                    for (City city : state.getCityDirectory().getCityList()) {
                        double cityUsage = 0, overuse = 0;

                        for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {

                            if (userAccount.getCity() != null) {
                                if (userAccount.getCity().equalsIgnoreCase(city.getName())) {
                                    for (Meter meter : userAccount.getMeterReadingList()) {
                                        cityUsage += meter.getWmReading();
                                        overuse += meter.getwOveruse();
                                    }
                                }
                            }
                        }

                        stateTotalUse += cityUsage;
                        stateTotalOveruse += overuse;

                        table.addCell(state.getName());//State
                        table.addCell(city.getName());//City1
                        table.addCell(String.valueOf(cityUsage));
                        table.addCell(String.valueOf(overuse));

                    }
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("Total Usage");//State
                    table.addCell(String.valueOf(stateTotalUse) + " gpm");//City1
                    table.addCell("Total OverUse");
                    table.addCell(String.valueOf(stateTotalOveruse + " gpm"));

                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                    table.addCell("\n");
                }

//                    table.addCell("Total");
//                    table.addCell("\t");
//                    table.addCell("Consumption");
                document.add(table);

                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));
                document.add(new Paragraph("\n"));

                JFreeChart chart1 = generateBarChart();

                PdfContentByte contentByte = writer.getDirectContent();
                PdfTemplate template = contentByte.createTemplate(500, 400);
                Graphics2D graphics2d = template.createGraphics(500, 400, new DefaultFontMapper());
                Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, 500, 400);

                chart1.draw(graphics2d, rectangle2d);

                graphics2d.dispose();
                contentByte.addTemplate(template, 0, 0);

                document.close();
            } catch (DocumentException de) {
                de.printStackTrace();
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }

        }
    }//GEN-LAST:event_btnWaterReportActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    public JFreeChart generateBarChart() {
        DefaultCategoryDataset dataSet = new DefaultCategoryDataset();

        for (State state : system.getStateList()) {
            double stateTotalUse = 0, stateTotalOveruse = 0;
            for (City city : state.getCityDirectory().getCityList()) {
                double cityUsage = 0, overuse = 0;

                for (UserAccount userAccount : system.getUserAccountDirectory().getUserAccountList()) {

                    if (userAccount.getCity() != null) {
                        if (userAccount.getCity().equalsIgnoreCase(city.getName())) {
                            for (Meter meter : userAccount.getMeterReadingList()) {
                                cityUsage += meter.getWmReading();
                                overuse += meter.getwOveruse();
                            }
                        }
                    }
                }

                stateTotalUse += cityUsage;
                stateTotalOveruse += overuse;

            }
            dataSet.setValue(stateTotalOveruse, "Over-Consumption", state.getName());
            dataSet.setValue(stateTotalUse, "Consumption", state.getName());//Values

        }

        JFreeChart chart = ChartFactory.createBarChart(
                "State-Level Resource Consumption", "State", "Consumption in Units",
                dataSet, PlotOrientation.VERTICAL, false, true, false);

        return chart;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnElectricityReport;
    private javax.swing.JButton btnGasReport;
    private javax.swing.JButton btnWaterReport;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
